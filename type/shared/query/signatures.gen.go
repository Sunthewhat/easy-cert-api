// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/sunthewhat/easy-cert-api/type/shared/model"
)

func newSignature(db *gorm.DB, opts ...gen.DOOption) signature {
	_signature := signature{}

	_signature.signatureDo.UseDB(db, opts...)
	_signature.signatureDo.UseModel(&model.Signature{})

	tableName := _signature.signatureDo.TableName()
	_signature.ALL = field.NewAsterisk(tableName)
	_signature.ID = field.NewString(tableName, "id")
	_signature.SignerID = field.NewString(tableName, "signer_id")
	_signature.CertificateID = field.NewString(tableName, "certificate_id")
	_signature.Signature = field.NewString(tableName, "signature")
	_signature.CreatedAt = field.NewTime(tableName, "created_at")
	_signature.IsSigned = field.NewBool(tableName, "is_signed")
	_signature.CreatedBy = field.NewString(tableName, "created_by")
	_signature.IsRequested = field.NewBool(tableName, "is_requested")
	_signature.LastRequest = field.NewTime(tableName, "last_request")

	_signature.fillFieldMap()

	return _signature
}

type signature struct {
	signatureDo

	ALL           field.Asterisk
	ID            field.String
	SignerID      field.String
	CertificateID field.String
	Signature     field.String
	CreatedAt     field.Time
	IsSigned      field.Bool
	CreatedBy     field.String
	IsRequested   field.Bool
	LastRequest   field.Time

	fieldMap map[string]field.Expr
}

func (s signature) Table(newTableName string) *signature {
	s.signatureDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s signature) As(alias string) *signature {
	s.signatureDo.DO = *(s.signatureDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *signature) updateTableName(table string) *signature {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.SignerID = field.NewString(table, "signer_id")
	s.CertificateID = field.NewString(table, "certificate_id")
	s.Signature = field.NewString(table, "signature")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.IsSigned = field.NewBool(table, "is_signed")
	s.CreatedBy = field.NewString(table, "created_by")
	s.IsRequested = field.NewBool(table, "is_requested")
	s.LastRequest = field.NewTime(table, "last_request")

	s.fillFieldMap()

	return s
}

func (s *signature) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *signature) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["id"] = s.ID
	s.fieldMap["signer_id"] = s.SignerID
	s.fieldMap["certificate_id"] = s.CertificateID
	s.fieldMap["signature"] = s.Signature
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["is_signed"] = s.IsSigned
	s.fieldMap["created_by"] = s.CreatedBy
	s.fieldMap["is_requested"] = s.IsRequested
	s.fieldMap["last_request"] = s.LastRequest
}

func (s signature) clone(db *gorm.DB) signature {
	s.signatureDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s signature) replaceDB(db *gorm.DB) signature {
	s.signatureDo.ReplaceDB(db)
	return s
}

type signatureDo struct{ gen.DO }

func (s signatureDo) Debug() *signatureDo {
	return s.withDO(s.DO.Debug())
}

func (s signatureDo) WithContext(ctx context.Context) *signatureDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s signatureDo) ReadDB() *signatureDo {
	return s.Clauses(dbresolver.Read)
}

func (s signatureDo) WriteDB() *signatureDo {
	return s.Clauses(dbresolver.Write)
}

func (s signatureDo) Session(config *gorm.Session) *signatureDo {
	return s.withDO(s.DO.Session(config))
}

func (s signatureDo) Clauses(conds ...clause.Expression) *signatureDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s signatureDo) Returning(value interface{}, columns ...string) *signatureDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s signatureDo) Not(conds ...gen.Condition) *signatureDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s signatureDo) Or(conds ...gen.Condition) *signatureDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s signatureDo) Select(conds ...field.Expr) *signatureDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s signatureDo) Where(conds ...gen.Condition) *signatureDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s signatureDo) Order(conds ...field.Expr) *signatureDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s signatureDo) Distinct(cols ...field.Expr) *signatureDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s signatureDo) Omit(cols ...field.Expr) *signatureDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s signatureDo) Join(table schema.Tabler, on ...field.Expr) *signatureDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s signatureDo) LeftJoin(table schema.Tabler, on ...field.Expr) *signatureDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s signatureDo) RightJoin(table schema.Tabler, on ...field.Expr) *signatureDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s signatureDo) Group(cols ...field.Expr) *signatureDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s signatureDo) Having(conds ...gen.Condition) *signatureDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s signatureDo) Limit(limit int) *signatureDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s signatureDo) Offset(offset int) *signatureDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s signatureDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *signatureDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s signatureDo) Unscoped() *signatureDo {
	return s.withDO(s.DO.Unscoped())
}

func (s signatureDo) Create(values ...*model.Signature) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s signatureDo) CreateInBatches(values []*model.Signature, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s signatureDo) Save(values ...*model.Signature) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s signatureDo) First() (*model.Signature, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Signature), nil
	}
}

func (s signatureDo) Take() (*model.Signature, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Signature), nil
	}
}

func (s signatureDo) Last() (*model.Signature, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Signature), nil
	}
}

func (s signatureDo) Find() ([]*model.Signature, error) {
	result, err := s.DO.Find()
	return result.([]*model.Signature), err
}

func (s signatureDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Signature, err error) {
	buf := make([]*model.Signature, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s signatureDo) FindInBatches(result *[]*model.Signature, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s signatureDo) Attrs(attrs ...field.AssignExpr) *signatureDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s signatureDo) Assign(attrs ...field.AssignExpr) *signatureDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s signatureDo) Joins(fields ...field.RelationField) *signatureDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s signatureDo) Preload(fields ...field.RelationField) *signatureDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s signatureDo) FirstOrInit() (*model.Signature, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Signature), nil
	}
}

func (s signatureDo) FirstOrCreate() (*model.Signature, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Signature), nil
	}
}

func (s signatureDo) FindByPage(offset int, limit int) (result []*model.Signature, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s signatureDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s signatureDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s signatureDo) Delete(models ...*model.Signature) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *signatureDo) withDO(do gen.Dao) *signatureDo {
	s.DO = *do.(*gen.DO)
	return s
}
