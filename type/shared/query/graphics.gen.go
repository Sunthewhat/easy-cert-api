// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/sunthewhat/secure-docs-api/type/shared/model"
)

func newGraphic(db *gorm.DB, opts ...gen.DOOption) graphic {
	_graphic := graphic{}

	_graphic.graphicDo.UseDB(db, opts...)
	_graphic.graphicDo.UseModel(&model.Graphic{})

	tableName := _graphic.graphicDo.TableName()
	_graphic.ALL = field.NewAsterisk(tableName)
	_graphic.ID = field.NewString(tableName, "id")
	_graphic.Name = field.NewString(tableName, "name")
	_graphic.SvgContent = field.NewString(tableName, "svg_content")
	_graphic.CreatedAt = field.NewTime(tableName, "created_at")
	_graphic.UpdatedAt = field.NewTime(tableName, "updated_at")

	_graphic.fillFieldMap()

	return _graphic
}

type graphic struct {
	graphicDo

	ALL        field.Asterisk
	ID         field.String
	Name       field.String
	SvgContent field.String
	CreatedAt  field.Time
	UpdatedAt  field.Time

	fieldMap map[string]field.Expr
}

func (g graphic) Table(newTableName string) *graphic {
	g.graphicDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g graphic) As(alias string) *graphic {
	g.graphicDo.DO = *(g.graphicDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *graphic) updateTableName(table string) *graphic {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewString(table, "id")
	g.Name = field.NewString(table, "name")
	g.SvgContent = field.NewString(table, "svg_content")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")

	g.fillFieldMap()

	return g
}

func (g *graphic) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *graphic) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 5)
	g.fieldMap["id"] = g.ID
	g.fieldMap["name"] = g.Name
	g.fieldMap["svg_content"] = g.SvgContent
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
}

func (g graphic) clone(db *gorm.DB) graphic {
	g.graphicDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g graphic) replaceDB(db *gorm.DB) graphic {
	g.graphicDo.ReplaceDB(db)
	return g
}

type graphicDo struct{ gen.DO }

func (g graphicDo) Debug() *graphicDo {
	return g.withDO(g.DO.Debug())
}

func (g graphicDo) WithContext(ctx context.Context) *graphicDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g graphicDo) ReadDB() *graphicDo {
	return g.Clauses(dbresolver.Read)
}

func (g graphicDo) WriteDB() *graphicDo {
	return g.Clauses(dbresolver.Write)
}

func (g graphicDo) Session(config *gorm.Session) *graphicDo {
	return g.withDO(g.DO.Session(config))
}

func (g graphicDo) Clauses(conds ...clause.Expression) *graphicDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g graphicDo) Returning(value interface{}, columns ...string) *graphicDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g graphicDo) Not(conds ...gen.Condition) *graphicDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g graphicDo) Or(conds ...gen.Condition) *graphicDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g graphicDo) Select(conds ...field.Expr) *graphicDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g graphicDo) Where(conds ...gen.Condition) *graphicDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g graphicDo) Order(conds ...field.Expr) *graphicDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g graphicDo) Distinct(cols ...field.Expr) *graphicDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g graphicDo) Omit(cols ...field.Expr) *graphicDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g graphicDo) Join(table schema.Tabler, on ...field.Expr) *graphicDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g graphicDo) LeftJoin(table schema.Tabler, on ...field.Expr) *graphicDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g graphicDo) RightJoin(table schema.Tabler, on ...field.Expr) *graphicDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g graphicDo) Group(cols ...field.Expr) *graphicDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g graphicDo) Having(conds ...gen.Condition) *graphicDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g graphicDo) Limit(limit int) *graphicDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g graphicDo) Offset(offset int) *graphicDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g graphicDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *graphicDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g graphicDo) Unscoped() *graphicDo {
	return g.withDO(g.DO.Unscoped())
}

func (g graphicDo) Create(values ...*model.Graphic) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g graphicDo) CreateInBatches(values []*model.Graphic, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g graphicDo) Save(values ...*model.Graphic) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g graphicDo) First() (*model.Graphic, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Graphic), nil
	}
}

func (g graphicDo) Take() (*model.Graphic, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Graphic), nil
	}
}

func (g graphicDo) Last() (*model.Graphic, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Graphic), nil
	}
}

func (g graphicDo) Find() ([]*model.Graphic, error) {
	result, err := g.DO.Find()
	return result.([]*model.Graphic), err
}

func (g graphicDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Graphic, err error) {
	buf := make([]*model.Graphic, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g graphicDo) FindInBatches(result *[]*model.Graphic, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g graphicDo) Attrs(attrs ...field.AssignExpr) *graphicDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g graphicDo) Assign(attrs ...field.AssignExpr) *graphicDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g graphicDo) Joins(fields ...field.RelationField) *graphicDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g graphicDo) Preload(fields ...field.RelationField) *graphicDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g graphicDo) FirstOrInit() (*model.Graphic, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Graphic), nil
	}
}

func (g graphicDo) FirstOrCreate() (*model.Graphic, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Graphic), nil
	}
}

func (g graphicDo) FindByPage(offset int, limit int) (result []*model.Graphic, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g graphicDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g graphicDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g graphicDo) Delete(models ...*model.Graphic) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *graphicDo) withDO(do gen.Dao) *graphicDo {
	g.DO = *do.(*gen.DO)
	return g
}
